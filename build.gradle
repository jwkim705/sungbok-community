import org.jooq.meta.jaxb.*

buildscript {
    ext {
        jooqVersion = '3.20.4'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'

    //jooq
    id 'nu.studer.jooq' version '10.1'  // JOOQ 코드 생성을 위한 플러그인

    //restdocs
    id 'org.asciidoctor.jvm.convert' version '4.0.4'
    id 'com.epages.restdocs-api-spec' version '0.19.4'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.sungbok'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude module: 'spring-boot-starter-logging'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter 의존성
    implementation ('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq:jooq'
    }
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation' // 요청 유효성 검사 추가
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // OAuth2 로그인 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // 데이터베이스 & jOOQ
    implementation "org.jooq:jooq:$jooqVersion"
    runtimeOnly "org.postgresql:postgresql"

    jooqGenerator project(':jooq-custom')

    jooqGenerator 'org.postgresql:postgresql'
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-codegen:${jooqVersion}"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // API 문서화
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6' // Swagger UI 추가
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // Spring REST Docs 추가
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'

    //common String util
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.apache.commons:commons-text:1.13.1'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    //object mapper
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'

    // 테스팅
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// jOOQ 코드 생성
jooq {
    version.set("${jooqVersion}")

    configurations {
        create("main") {
            generationTool {
                jdbc {	// DB 접속정보 설정, 로컬의 경우 아래처럼 사용하고, 실제 배포 환경에서는 접속정보등을 환경변수등으로 추가해줘야 한다.(jenkins 등에서)
                    driver = "org.postgresql.Driver"
                    // PostgreSQL URL 형식으로 변경
                    url = System.getenv("DB_URL") ?: "jdbc:postgresql://localhost:5432/community"
                    user = System.getenv("POSTGRES_USER") ?: "admin"
                    password = System.getenv("POSTGRES_PASSWORD") ?: "1234"
                }

                generator {
                    name = "org.jooq.codegen.DefaultGenerator" // Java 코드 생성기, Kotlin 의 경우 다른 제너레이터 사용

                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"  // 기본 스키마를 public으로 변경
                        includes = ".*"         // 모든 테이블 포함
                        excludes = "flyway_schema_history|spatial_ref_sys"  // 시스템 테이블 제외
                    }

                    // 생성된 코드 옵션
                    generate {
                        daos = true                       // DSL 생성시 dao 생성 여부
                        records = true                    // DSL 생성시 record 생성 여부
                        fluentSetters = true              // 메서드 체이닝 가능한 setter 생성
                        javaTimeTypes = true              // Java 8 날짜/시간 타입 사용
                        deprecated = false                // deprecated 코드 생성 안함
                        pojos = true                      // POJO 생성 추가
                        interfaces = true                 // 인터페이스 생성 추가

                        // Spring 관련 추가 설정
//                        springDao = true          // Spring DAO 지원
//                        springAnnotations = true  // Spring 통합
                    }

                    target {
                        // 생성될 DSL 클래스의 패키지명, 프로젝트 패키지와 일관되계 셋팅하면 된다.
                        packageName = "org.jooq.generated"
                        // DSL 생성 위치를 build 디렉토리로 변경
                        directory = "build/generated-src/jooq/main"
                    }

                    strategy {
                        name = "jooq.custom.generator.JPrefixGeneratorStrategy" // 서브모듈의 커스텀 jooqGenerator 설정에 추가
                    }
                }
            }
        }
    }
}

// JOOQ 코드 생성이 컴파일 전에 실행되도록 설정
tasks.named('compileJava').configure {
    it.dependsOn(tasks.named('generateJooq'))
}

tasks.named('compileTestJava').configure {
    it.dependsOn(tasks.named('generateJooq'))
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "build/generated-src/jooq/main"]	// 생성된 코드를 프로젝트 소스로 인식하도로 설정
        }
        resources {
            // openapi3 출력 디렉토리를 리소스로 포함
            srcDir 'build/resources/main/static'
        }
    }
}

openapi3 {
    servers = [
            { url = "http://localhost:8080"; description = "Local server" }
    ]
    title = "Spring Restdocs with SwaggerUI Sample"
    description = "This is made with Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    format = 'json'
}

bootJar {
    dependsOn(':test')
    dependsOn(':openapi3')
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
}

//빌드 시 plan jar 생성 되지 않도록 설정(Executive jar만 생성)
tasks.named('jar') {
    enabled = false
}