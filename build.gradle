import org.jooq.meta.jaxb.*

buildscript {
    ext {
        jooqVersion = '3.20.3'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'

    //jooq
    id 'dev.monosoul.jooq-docker' version '7.0.8'

    //restdocs
    id 'org.asciidoctor.jvm.convert' version '4.0.4'
    id 'com.epages.restdocs-api-spec' version '0.19.4'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.sungbok'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude module: 'spring-boot-starter-logging'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter 의존성
    implementation ('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq:jooq'
    }
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation' // 요청 유효성 검사 추가
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // OAuth2 로그인 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // 데이터베이스 & jOOQ
    implementation "org.jooq:jooq:$jooqVersion"
    runtimeOnly "org.postgresql:postgresql"
    jooqCodegen project(':jooq-custom')
    jooqCodegen "org.jooq:jooq:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-meta:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-codegen:${jooqVersion}"
    jooqCodegen "org.postgresql:postgresql"

    //flyway
    jooqCodegen 'org.flywaydb:flyway-core:11.8.0'
    jooqCodegen 'org.flywaydb:flyway-database-postgresql:11.8.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // API 문서화
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6' // Swagger UI 추가
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // Spring REST Docs 추가
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'

    //common String util
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.apache.commons:commons-text:1.13.1'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    //object mapper
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'

    // 테스팅
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// jOOQ 코드 생성
jooq {
    version = "${jooqVersion}"
    withContainer {
        image {
            name = "postgres:17.4"
            envVars = [
                    POSTGRES_USER : "admin",
                    POSTGRES_PASSWORD: "1234",
                    POSTGRES_DB     : "community"
            ]
        }

        db {
            username = "admin"
            password = "1234"
            name = "community"
            port = 5432
            jdbc {
                schema = "jdbc:postgresql"
                driverClassName = "org.postgresql.Driver"
            }
        }
    }
}
tasks {
    generateJooqClasses {
        schemas.set(["public"])
        outputDirectory.set(project.layout.projectDirectory.dir("src/generated"))
        includeFlywayTable.set(false)

        usingJavaConfig {
            generate = new Generate()
                    .withJavaTimeTypes(true)
                    .withDeprecated(false)
                    .withDaos(true)
                    .withFluentSetters(true)
                    .withRecords(true)

            withStrategy(
                    new Strategy().withName("jooq.custom.generator.JPrefixGeneratorStrategy")
            )

        }
    }
}

sourceSets {
    main {
        resources {
            // openapi3 출력 디렉토리를 리소스로 포함
            srcDir 'build/resources/main/static'
        }
    }
}

openapi3 {
    servers = [
            { url = "http://localhost:8080"; description = "Local server" }
    ]
    title = "Spring Restdocs with SwaggerUI Sample"
    description = "This is made with Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    format = 'json'
}

bootJar {
    dependsOn(':test')
    dependsOn(':openapi3')
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
}